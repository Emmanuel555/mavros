#!/usr/bin/env python
# vim:set ts=4 sw=4 et:
#
# Copyright 2015 UAVenture AG.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# Updated: Tarek Taha : tarek.taha@kustar.ac.ae, Vladimir Ermakov
#    - Changed topic names after re-factoring : https://github.com/mavlink/mavros/issues/233
#    - Use mavros.setpoint module for topics

import rospy
import thread
import threading
import time
import mavros

from numpy import linalg #linear algebra, can be used to find things like eigenvectors etc.
import numpy as np

from math import *
from mavros.utils import *
from mavros import setpoint as SP
from std_msgs.msg import Header #type 
from std_msgs.msg import Float64, Float32 #type from msg generation
from geometry_msgs.msg import PoseStamped, Quaternion, TwistStamped #geometry
from tf.transformations import quaternion_from_euler #transformation
from mavros_msgs.srv import CommandLong #service_class
from sensor_msgs.msg import NavSatFix,Range,LaserScan #type
from mavros_msgs.msg import PositionTarget,Thrust
from tf2_msgs.msg import TFMessage
import time



class Straight_Inspection:
    """
    This class sends position targets to FCU's position controller
    """
    def __init__(self):
        self.x = None
        self.y = None
        self.armed = False  
        self.timeout = 180
        self.rate = rospy.Rate(50) # 10hz is the original 
        self.local_position = PoseStamped() 
        self.count = 0
        self.counter = 0
        self.counter_2 = 0
        self.sensor_0 = 0.0
        self.sensor_45 = 0.0
        self.sensor_90 = 0.0
        self.sensor_135 = 0.0 
        self.sensor_180 = 0.0
        self.sensor_225 = 0.0
        self.sensor_270 = 0.0
        self.sensor_315 = 0.0 

        #rospy.wait_for_service('mavros/cmd/arming', 30) # wait for arming, queue for 30s
        #rospy.Subscriber("subscribed topic",topic type,callback invoked with the message as the first arg)  

        rospy.Subscriber('/tf', TFMessage, self.callback_tf)
        rospy.Subscriber("scan",  LaserScan, self.scan_callback)
        rospy.Subscriber("mavros/local_position/pose", PoseStamped, self.position_callback)
        self.pub_vis = rospy.Publisher('mavros/vision_pose/pose', PoseStamped, queue_size=10)
        self.pub_spt = rospy.Publisher('mavros/setpoint_position/local', PoseStamped, queue_size=10)
        #rospy.wait_for_service('mavros/cmd/command', 30)
        #self._srv_cmd_long = rospy.ServiceProxy('mavros/cmd/command', CommandLong, persistent=True)
      
        while not rospy.is_shutdown(): #subsequent functions below are automatically run using this while loop (inert functions)  
            
            print "0:", self.sensor_0, "90:", self.sensor_90, "180:", self.sensor_180, "270:", self.sensor_270, "alti: ", abs(self.local_position.pose.position.z), "Counter: ", self.counter, "Iteration_18"
            while not self.x or not self.y:
                time.sleep(0.01)

            if self.sensor_0 <= 1.50:
                self.counter = self.counter + 1
               
            if self.counter < 4:
                self.fly2() 
            
            elif self.counter >= 4:
                self.fly3()  
            
            self.estimator()
            self.rate.sleep()
 

    def position_callback(self, data): # callback invoked with the message as the first arg
        self.local_position = data 


    def callback_tf(self,data):
        if data.transforms[0].child_frame_id == "base_footprint":
            self.y = -data.transforms[0].transform.translation.x
            self.x = data.transforms[0].transform.translation.y


    def scan_callback(self,data):
        angle_ls = []
        for i in range(0,1440,180):
            angle_ls.append(-(i+1))

        self.scan = data
        self.sensor_0 = self.scan.ranges[angle_ls[0]]
        self.sensor_45 = self.scan.ranges[angle_ls[7]]
        self.sensor_90 = self.scan.ranges[angle_ls[6]]
        self.sensor_135 = self.scan.ranges[angle_ls[5]]
        self.sensor_180 = self.scan.ranges[angle_ls[4]]
        self.sensor_225 = self.scan.ranges[angle_ls[3]]
        self.sensor_270 = self.scan.ranges[angle_ls[2]]
        self.sensor_315 = self.scan.ranges[angle_ls[1]]  


    def arm(self):
        if self.count < self.timeout:
            # FIXME: arm and switch to offboard
            # (need to wait the first few rounds until PX4 has the offboard stream)
            if not self.armed and self.count > 5:
                self._srv_cmd_long(False, 176, False,
                                   1, 6, 0, 0, 0, 0, 0)
                # make sure the first command doesn't get lost
                time.sleep(1)

                self._srv_cmd_long(False, 400, False,
                                   # arm
                                   1, 0, 0, 0, 0, 0, 0)

                self.armed = True
            self.count = self.count + 1
            self.rate.sleep() # The loop calls rate.sleep(), which sleeps just long enough to maintain the desired rate through the loop.


    def fly2(self):
        
        # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header()
        pos.header.frame_id = "fly2"

        if self.sensor_0 >= 1.5:
            # Establish desired setpoints
            pos.pose.position.x = self.local_position.pose.position.x - 0.015
            
        else:
            # Establish desired setpoints
            pos.pose.position.x = self.local_position.pose.position.x 
            
            
        if self.sensor_90 >= 1.5:
            # Establish desired setpoints
            pos.pose.position.y = self.local_position.pose.position.y - 0.015

        elif self.sensor_90 < 1.3:
            # Establish desired setpoints
            pos.pose.position.y = self.local_position.pose.position.y + 0.015
            
        else:
            # Establish desired setpoints
            pos.pose.position.y = self.local_position.pose.position.y 
            
            
        if self.local_position.pose.position.z >= 1.5:
            pos.pose.position.z = self.local_position.pose.position.z - 0.018

        elif self.local_position.pose.position.z < 1.3:
            pos.pose.position.z = self.local_position.pose.position.z + 0.018
            
        else:
            pos.pose.position.z = self.local_position.pose.position.z
            
            
        # Establish desired orientation at setpoint
        roll_degrees = 0.0 
        roll = radians(roll_degrees)
        pitch_degrees = 0.0 
        pitch = radians(pitch_degrees)
        yaw_degrees = 180.0 
        yaw = radians(yaw_degrees)

        # Execute desired orientation
        quaternion = quaternion_from_euler(roll, pitch, yaw)
        pos.pose.orientation = Quaternion(*quaternion)

        pos.header.stamp = rospy.Time.now()
        self.pub_spt.publish(pos) 


    def fly3(self):
        
        # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header()
        pos.header.frame_id = "fly3"


        if self.sensor_315 <= 1.2:
            self.counter_2 = self.counter_2 + 1

        if self.counter_2 < 4:    
            if self.sensor_90 >= 1.5:
                # Establish desired setpoints
                pos.pose.position.x = self.local_position.pose.position.x + 0.015

            elif self.sensor_90 < 1.3:
                # Establish desired setpoints
                pos.pose.position.x = self.local_position.pose.position.x - 0.015
                
            else:
                # Establish desired setpoints
                pos.pose.position.x = self.local_position.pose.position.x 
                
                
            if self.sensor_0 >= 1.0:
                # Establish desired setpoints
                pos.pose.position.y = self.local_position.pose.position.y + 0.015

            else:
                # Establish desired setpoints
                pos.pose.position.y = self.local_position.pose.position.y 

                
            if self.local_position.pose.position.z >= 1.5:
                pos.pose.position.z = self.local_position.pose.position.z - 0.018

            elif self.local_position.pose.position.z < 1.3:
                pos.pose.position.z = self.local_position.pose.position.z + 0.018
            
            else:
                pos.pose.position.z = self.local_position.pose.position.z


        if self.counter_2 > 4:
            if self.sensor_90 >= 1.5:
            # Establish desired setpoints
                pos.pose.position.x = self.local_position.pose.position.x + 0.015

            elif self.sensor_90 < 1.3:
                # Establish desired setpoints
                pos.pose.position.x = self.local_position.pose.position.x - 0.015
                
            else:
                # Establish desired setpoints
                pos.pose.position.x = self.local_position.pose.position.x 
                
                
            if self.sensor_180 >= 1.2:
                # Establish desired setpoints
                pos.pose.position.y = self.local_position.pose.position.y - 0.015

            else:
                # Establish desired setpoints
                pos.pose.position.y = self.local_position.pose.position.y 

                        
            if self.local_position.pose.position.z >= 1.7:
                pos.pose.position.z = self.local_position.pose.position.z - 0.018

            elif self.local_position.pose.position.z < 1.5:
                pos.pose.position.z = self.local_position.pose.position.z + 0.018
                
            else:
                pos.pose.position.z = self.local_position.pose.position.z
            
            
        # Establish desired orientation at setpoint
        roll_degrees = 0.0 
        roll = radians(roll_degrees)
        pitch_degrees = 0.0 
        pitch = radians(pitch_degrees)
        yaw_degrees = 90.0 
        yaw = radians(yaw_degrees)

        # Execute desired orientation
        quaternion = quaternion_from_euler(roll, pitch, yaw)
        pos.pose.orientation = Quaternion(*quaternion)

        pos.header.stamp = rospy.Time.now()
        self.pub_spt.publish(pos) 
        
            
    def estimator(self):

        # Initialise necessary headers
        pos = PoseStamped()
        pos.header = Header()
        pos.header.frame_id = "vision"

        pos.pose.position.x = self.x
        pos.pose.position.y = self.y
            
        pos.header.stamp = rospy.Time.now() # Update timestamp for each published SP
        self.pub_vis.publish(pos)
            

if __name__ == '__main__':
    rospy.init_node('shadow_test_node', anonymous=True)

    node = Straight_Inspection()

    rospy.spin()  # spin() simply keeps python from exiting until this node is stopped
     

