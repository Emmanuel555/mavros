#!/usr/bin/env python
# vim:set ts=4 sw=4 et:
#
# Copyright 2015 UAVenture AG.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# Updated: Tarek Taha : tarek.taha@kustar.ac.ae, Vladimir Ermakov
#    - Changed topic names after re-factoring : https://github.com/mavlink/mavros/issues/233
#    - Use mavros.setpoint module for topics

from sensor_msgs.msg import PointCloud2, LaserScan
from laser_geometry import LaserProjection as lp
#import laser_geometry.laser_geometry as lg
import math
import rospy
import thread
import threading
import time
import numpy as np
import mavros

from math import *
from mavros.utils import *
from mavros import setpoint as SP
#from tf.transformations import quaternion_from_euler

class sc2pcl:

    def __init__(self):
        self.rate = rospy.Rate(50) # 10hz is the original
        self.laserProj = lp()
        self.scan_data = LaserScan()
        rospy.Subscriber("/scan",  LaserScan, self.scan_callback) # subscription to range values from rplidar
        self.pc = rospy.Publisher("converted_pc", PointCloud2, queue_size=1)

        while not rospy.is_shutdown():
            self.pcl_pub()
            print "sc2pcl is running"

            self.rate.sleep()

    def scan_callback(self, data): # callback invoked with the message as the first arg
        self.scan_data =  data
        
    def pcl_pub(self):
        self.pc.publish(self.laserProj.projectLaser(self.scan_data))
                
if __name__ == '__main__':
    rospy.init_node('sc2pcl', anonymous=True)
    node = sc2pcl()
    rospy.spin() # spin() simply keeps python from exiting until this node is stopped
