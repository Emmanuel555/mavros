#!/usr/bin/env python
# vim:set ts=4 sw=4 et:
#
# Copyright 2015 UAVenture AG.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# Updated: Tarek Taha : tarek.taha@kustar.ac.ae, Vladimir Ermakov
#    - Changed topic names after re-factoring : https://github.com/mavlink/mavros/issues/233
#    - Use mavros.setpoint module for topics

import rospy
import thread
import threading
import time
import mavros

import numpy as np

from math import *
from mavros.utils import *
from mavros import setpoint as SP
from std_msgs.msg import Header #type 
from std_msgs.msg import Float64, Float32 #type from msg generation
from geometry_msgs.msg import PoseStamped, Quaternion, TwistStamped #geometry
#from tf.transformations import quaternion_from_euler #transformation
from mavros_msgs.srv import CommandLong #service_class
from sensor_msgs.msg import NavSatFix,Range,LaserScan #type
from teraranger_array.msg import RangeArray


class teraranger_hub_local:
    """
    This class sends position targets to FCU's position controller
    """
    def __init__(self):
        self.collective = RangeArray()
        self.rate = rospy.Rate(50) # 10hz is the original 
        self.sensor_x = 0.0
        self.sensor_y = 0.0
        self.origin_x = 1.0
        self.origin_y = 1.0

        #rospy.Subscriber("subscribed topic",topic type,callback invoked with the message as the first arg)  

        rospy.Subscriber("hub_1/ranges_raw", RangeArray, self.hub_callback)
        self.pub_x = rospy.Publisher('x_pos', Float64, queue_size=10)
        self.pub_y = rospy.Publisher('y_pos', Float64, queue_size=10)
        #rospy.Subscriber("mavros/local_position/pose", PoseStamped, self.position_callback)
      
        while not rospy.is_shutdown(): #subsequent functions below are automatically run using this while loop (inert functions)  
            
            self.pub_local()
           
            self.rate.sleep() #The loop calls rate.sleep(), which sleeps just long enough to maintain the desired rate through the loop.

    def hub_callback(self,msg): # callback invoked with the message as the first arg
        self.collective = msg
        for i in self.collective.ranges:
            self.sensor_x = self.collective.ranges[6].range # sensor no. always begins from 0 in python
            self.sensor_y = self.collective.ranges[0].range 


    def pub_local(self):
        x_local = Float64()
        x_local = self.sensor_x - self.origin_x
      
        y_local = Float64()
        y_local = self.sensor_y - self.origin_y
        
        print "X:", x_local, "Y:", y_local
        self.pub_y.publish(y_local)
        self.pub_x.publish(x_local)
    
if __name__ == '__main__':
    rospy.init_node('teraranger_hub_local', anonymous=True)
    node = teraranger_hub_local()
    #node.hub_callback
    rospy.spin()  # spin() simply keeps ros python from exiting until this node is stopped
     


